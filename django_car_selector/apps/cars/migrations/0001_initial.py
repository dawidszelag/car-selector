# Generated by Django 4.0 on 2022-09-10 15:31

import apps.cars.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('badge', models.CharField(blank=True, max_length=300, null=True)),
                ('body', models.CharField(blank=True, max_length=300, null=True)),
                ('doors', models.PositiveSmallIntegerField(null=True)),
                ('seats', models.PositiveSmallIntegerField(null=True)),
                ('transmission', models.CharField(blank=True, max_length=300, null=True)),
                ('gears', models.PositiveIntegerField(null=True)),
                ('drive', models.CharField(blank=True, max_length=300, null=True)),
                ('engine_location', models.CharField(blank=True, max_length=300, null=True)),
                ('engine_size', models.PositiveSmallIntegerField(null=True)),
                ('engine_configuration', models.CharField(blank=True, max_length=300, null=True)),
                ('cylinders', models.PositiveSmallIntegerField(null=True)),
                ('power_kw', models.CharField(max_length=100, null=True, verbose_name='Power (kW)')),
                ('power_hp', models.CharField(max_length=100, null=True, verbose_name='Power (HP)')),
                ('power_rpm', models.CharField(max_length=100, null=True, verbose_name='Power (rpm)')),
                ('torque_nm', models.CharField(max_length=100, null=True, verbose_name='Power (Nm)')),
                ('torque_rpm', models.CharField(max_length=100, null=True, verbose_name='torque (rpm)')),
                ('acceleration', models.CharField(max_length=100, null=True, verbose_name='Acceleration 0-100')),
                ('top_speed', models.CharField(max_length=100, null=True, verbose_name='Top speed (KM/H)')),
                ('fuel_type', models.CharField(blank=True, max_length=300, null=True)),
                ('fuel_capacity', models.CharField(max_length=100, null=True)),
                ('fuel_combined', models.CharField(max_length=100, null=True, verbose_name='Fuel combined (L/KM)')),
                ('fuel_urban', models.CharField(max_length=100, null=True, verbose_name='Fuel urban (L/KM)')),
                ('fuel_average_distance', models.CharField(max_length=100, null=True, verbose_name='Fuel average distance (KM)')),
                ('electric_range', models.CharField(default=0, max_length=100, null=True, verbose_name='Electric range (KM)')),
                ('max_fuel_distance', models.CharField(max_length=100, null=True, verbose_name='Max fuel distance (KM)')),
                ('min_fuel_distance', models.CharField(max_length=100, null=True, verbose_name='Min fuel distance (KM)')),
                ('length', models.CharField(max_length=100, null=True, verbose_name='Length (MM)')),
                ('width', models.CharField(max_length=100, null=True, verbose_name='Width (MM)')),
                ('height', models.CharField(max_length=100, null=True, verbose_name='Height (MM)')),
                ('wheelbase', models.CharField(max_length=100, null=True, verbose_name='Wheelbase (MM)')),
                ('tare_mass', models.CharField(max_length=100, null=True, verbose_name='Tare mass (KG)')),
                ('ground_clearance', models.CharField(max_length=100, null=True, verbose_name='Ground clearance (MM)')),
                ('min_boot_space', models.CharField(max_length=100, null=True, verbose_name='Min boot space (L)')),
                ('max_boot_space', models.CharField(max_length=100, null=True, verbose_name='Max boot space (L)')),
                ('foldable_seats', models.BooleanField(default=False)),
                ('ancap', models.CharField(max_length=10, verbose_name='ANCAP')),
                ('warranty_years', models.CharField(max_length=100, null=True, verbose_name='Warranty (Years)')),
                ('warranty_distance', models.CharField(max_length=100, verbose_name='Warranty (KM)')),
                ('battery_warranty_years', models.CharField(max_length=100, null=True, verbose_name='Battery warranty (Years)')),
                ('battery_warranty_distance', models.CharField(max_length=100, null=True, verbose_name='Battery warranty (KM)')),
                ('compact', models.BooleanField(default=False)),
                ('medium', models.BooleanField(default=False)),
                ('large', models.BooleanField(default=False)),
                ('car_for_woman', models.BooleanField(default=False)),
                ('car_for_man', models.BooleanField(default=False)),
                ('young_driver', models.BooleanField(default=False, verbose_name='Young drivers (16-23)')),
                ('driver_23_45', models.BooleanField(default=False, verbose_name='Drivers (23-45)')),
                ('middle_aged_driver', models.BooleanField(default=False, verbose_name='Middle aged drivers (45-60)')),
                ('older_driver', models.BooleanField(default=False, verbose_name='Older drivers (60+)')),
                ('short_distance', models.BooleanField(default=False, verbose_name='Mainly local distance')),
                ('long_distance', models.BooleanField(default=False, verbose_name='Long distance')),
                ('mixed_distance', models.BooleanField(default=False, verbose_name='Mixed distance')),
                ('solo_drive', models.BooleanField(default=False, verbose_name='Solo drive')),
                ('big_family', models.BooleanField(default=False)),
                ('occasionally_plus_one_adult', models.BooleanField(default=False, verbose_name='Occasionally 1+ adult')),
                ('regularly_plus_one_adult', models.BooleanField(default=False, verbose_name='Regularly 1+ adult')),
                ('three_adults_back_seat', models.BooleanField(default=False, verbose_name='3 Adults back seat')),
                ('children', models.BooleanField(default=False)),
                ('elderly_front_seat', models.BooleanField(default=False)),
                ('elderly_back_seat', models.BooleanField(default=False)),
                ('dogs', models.BooleanField(default=False)),
                ('flexible', models.BooleanField(default=False)),
                ('safety_adult', models.PositiveSmallIntegerField(blank=True, help_text='percentage value (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('safety_child', models.PositiveSmallIntegerField(blank=True, help_text='percentage value (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('safety_road_user', models.PositiveSmallIntegerField(blank=True, help_text='percentage value (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('safety_systems', models.PositiveSmallIntegerField(blank=True, help_text='percentage value (0-100)', null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('comfort', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('practicality', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('cabin', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('style', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('info_system', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('sport_feel', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('handling', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('race_track', models.PositiveSmallIntegerField(blank=True, help_text='range (1-10)', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('light_off_road', models.BooleanField(default=False)),
                ('extreme_off_road', models.BooleanField(default=False)),
                ('all_drive', models.BooleanField(default=False)),
                ('first_time_drive', models.BooleanField(default=False)),
                ('tall_driver', models.BooleanField(default=False, verbose_name='Tall driver(s) - over 1.9 m')),
                ('uber_recommendation', models.BooleanField(default=False)),
                ('anna_cars', models.BooleanField(default=False, verbose_name="Anna's cars")),
                ('anna_for_women', models.BooleanField(default=False, verbose_name="Anna's for women")),
                ('anna_for_teens', models.BooleanField(default=False, verbose_name="Anna's teens")),
                ('perfect_city_car', models.BooleanField(default=False, verbose_name='Perfect city car')),
                ('ready', models.BooleanField(default=False, help_text='Ready to publish?')),
                ('error', models.BooleanField(default=False, help_text='Data contains an error')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CarBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('image', models.ImageField(upload_to='body_images')),
                ('order', models.PositiveSmallIntegerField(default=apps.cars.models.get_next_order_value)),
            ],
            options={
                'verbose_name_plural': 'Car bodies',
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('image', models.ImageField(null=True, upload_to='brand_images')),
            ],
            options={
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('currency', models.CharField(max_length=30)),
            ],
            options={
                'unique_together': {('name', 'currency')},
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('image', models.ImageField(upload_to='model_images')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='markets', to='cars.carbrand')),
            ],
            options={
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='CarImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='car_images')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='cars.car')),
            ],
        ),
        migrations.AddField(
            model_name='car',
            name='model',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='car', to='cars.carmodel'),
        ),
        migrations.CreateModel(
            name='CarOnTheMarket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.PositiveSmallIntegerField(null=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='markets', to='cars.car')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.market')),
            ],
            options={
                'unique_together': {('car', 'market')},
            },
        ),
    ]
